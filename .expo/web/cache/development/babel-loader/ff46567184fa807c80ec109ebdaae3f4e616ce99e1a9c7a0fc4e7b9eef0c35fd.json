{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport * as React from 'react';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nexport default function useDescriptors({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter\n}) {\n  const [options, setOptions] = React.useState({});\n  const {\n    onDispatchAction,\n    onOptionsChange\n  } = React.useContext(NavigationBuilderContext);\n  const context = React.useMemo(() => ({\n    navigation,\n    onAction,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    onDispatchAction,\n    onOptionsChange\n  }), [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  const navigations = useNavigationCache({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  });\n  const routes = useRouteCache(state.routes);\n  return routes.reduce((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n    const routeOptions = Object.assign({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n      route,\n      navigation\n    }), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n      route,\n      navigation\n    }), options[route.key]);\n    const mergedOptions = Object.assign({}, typeof defaultScreenOptions === 'function' ? defaultScreenOptions({\n      route,\n      navigation,\n      options: routeOptions\n    }) : defaultScreenOptions, routeOptions);\n    const clearOptions = () => setOptions(o => {\n      if (route.key in o) {\n        const _route$key = route.key,\n          rest = _objectWithoutPropertiesLoose(o, [_route$key].map(_toPropertyKey));\n        return rest;\n      }\n      return o;\n    });\n    acc[route.key] = {\n      navigation,\n      render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useRouteCache","NavigationContext","NavigationRouteContext","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","useContext","context","useMemo","navigations","routes","reduce","acc","route","i","screen","name","key","routeOptions","Object","assign","mergedOptions","clearOptions","o","_route$key","rest","_objectWithoutPropertiesLoose","map","_toPropertyKey","render","createElement","Provider","value","routeState"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/core/lib/module/useDescriptors.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: routeOptions,\n          })\n        : defaultScreenOptions),\n      ...routeOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}