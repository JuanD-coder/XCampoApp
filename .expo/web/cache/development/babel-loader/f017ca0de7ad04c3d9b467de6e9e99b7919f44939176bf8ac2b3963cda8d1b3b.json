{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Color from 'color';\nimport CardSheet from './CardSheet';\nimport { PanGestureHandler, GestureState } from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nconst GESTURE_VELOCITY_IMPACT = 0.3;\nconst TRUE = 1;\nconst FALSE = 0;\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nconst useNativeDriver = Platform.OS !== 'web';\nexport default class Card extends React.Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"isCurrentlyMounted\", false);\n    _defineProperty(this, \"isClosing\", new Animated.Value(FALSE));\n    _defineProperty(this, \"inverted\", new Animated.Value(getInvertedMultiplier(this.props.gestureDirection)));\n    _defineProperty(this, \"layout\", {\n      width: new Animated.Value(this.props.layout.width),\n      height: new Animated.Value(this.props.layout.height)\n    });\n    _defineProperty(this, \"isSwiping\", new Animated.Value(FALSE));\n    _defineProperty(this, \"interactionHandle\", void 0);\n    _defineProperty(this, \"pendingGestureCallback\", void 0);\n    _defineProperty(this, \"lastToValue\", void 0);\n    _defineProperty(this, \"animate\", ({\n      closing,\n      velocity\n    }) => {\n      const {\n        gesture,\n        transitionSpec,\n        onOpen,\n        onClose,\n        onTransitionStart\n      } = this.props;\n      const toValue = this.getAnimateToValue(_objectSpread(_objectSpread({}, this.props), {}, {\n        closing\n      }));\n      this.lastToValue = toValue;\n      const spec = closing ? transitionSpec.close : transitionSpec.open;\n      const animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      this.setPointerEventsEnabled(!closing);\n      this.handleStartInteraction();\n      clearTimeout(this.pendingGestureCallback);\n      onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n        closing\n      });\n      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n        velocity,\n        toValue,\n        useNativeDriver,\n        isInteraction: false\n      })).start(({\n        finished\n      }) => {\n        this.handleEndInteraction();\n        clearTimeout(this.pendingGestureCallback);\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n          if (this.isCurrentlyMounted) {\n            this.forceUpdate();\n          }\n        }\n      });\n    });\n    _defineProperty(this, \"getAnimateToValue\", ({\n      closing,\n      layout,\n      gestureDirection\n    }) => {\n      if (!closing) {\n        return 0;\n      }\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n    _defineProperty(this, \"setPointerEventsEnabled\", enabled => {\n      var _this$contentRef$curr;\n      const pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents\n      });\n    });\n    _defineProperty(this, \"handleStartInteraction\", () => {\n      if (this.interactionHandle === undefined) {\n        this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(this, \"handleEndInteraction\", () => {\n      if (this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n        this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(this, \"handleGestureStateChange\", ({\n      nativeEvent\n    }) => {\n      const {\n        layout,\n        onClose,\n        onGestureBegin,\n        onGestureCanceled,\n        onGestureEnd,\n        gestureDirection,\n        gestureVelocityImpact\n      } = this.props;\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          this.isSwiping.setValue(TRUE);\n          this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n        case GestureState.CANCELLED:\n          {\n            this.isSwiping.setValue(FALSE);\n            this.handleEndInteraction();\n            const velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            this.animate({\n              closing: this.props.closing,\n              velocity\n            });\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n        case GestureState.END:\n          {\n            this.isSwiping.setValue(FALSE);\n            let distance;\n            let translation;\n            let velocity;\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              velocity = nativeEvent.velocityX;\n            }\n            const closing = (translation + velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? velocity !== 0 || translation !== 0 : this.props.closing;\n            this.animate({\n              closing,\n              velocity\n            });\n            if (closing) {\n              this.pendingGestureCallback = setTimeout(() => {\n                onClose();\n                this.forceUpdate();\n              }, 32);\n            }\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n    _defineProperty(this, \"getInterpolatedStyle\", memoize((styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => styleInterpolator({\n      index,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n    _defineProperty(this, \"getCardAnimationContext\", memoize((index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({\n      index,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n    _defineProperty(this, \"contentRef\", React.createRef());\n  }\n  componentDidMount() {\n    this.animate({\n      closing: this.props.closing\n    });\n    this.isCurrentlyMounted = true;\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      layout,\n      gestureDirection,\n      closing\n    } = this.props;\n    const {\n      width,\n      height\n    } = layout;\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n    const toValue = this.getAnimateToValue(this.props);\n    if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n      this.animate({\n        closing\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n  gestureActivationCriteria() {\n    const {\n      layout,\n      gestureDirection,\n      gestureResponseDistance\n    } = this.props;\n    const distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: {\n          bottom: -layout.height + distance\n        }\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: {\n          top: -layout.height + distance\n        }\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: {\n            right: hitSlop\n          }\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: {\n            left: hitSlop\n          }\n        };\n      }\n    }\n  }\n  render() {\n    const _this$props = this.props,\n      {\n        styleInterpolator,\n        index,\n        current,\n        gesture,\n        next,\n        layout,\n        insets,\n        overlay,\n        overlayEnabled,\n        shadowEnabled,\n        gestureEnabled,\n        gestureDirection,\n        pageOverflowEnabled,\n        children,\n        containerStyle: customContainerStyle,\n        contentStyle\n      } = _this$props,\n      rest = _objectWithoutProperties(_this$props, [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"children\", \"containerStyle\", \"contentStyle\"]);\n    const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle\n    } = interpolatedStyle;\n    const handleGestureEvent = gestureEnabled ? Animated.event([{\n      nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n        translationY: gesture\n      } : {\n        translationX: gesture\n      }\n    }], {\n      useNativeDriver\n    }) : undefined;\n    const {\n      backgroundColor\n    } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n    return React.createElement(CardAnimationContext.Provider, {\n      value: animationContext\n    }, React.createElement(Animated.View, {\n      style: {\n        opacity: current\n      },\n      collapsable: false\n    }), React.createElement(View, _extends({\n      pointerEvents: \"box-none\"\n    }, rest), overlayEnabled ? React.createElement(View, {\n      pointerEvents: \"box-none\",\n      style: StyleSheet.absoluteFill\n    }, overlay({\n      style: overlayStyle\n    })) : null, React.createElement(Animated.View, {\n      style: [styles.container, containerStyle, customContainerStyle],\n      pointerEvents: \"box-none\"\n    }, React.createElement(PanGestureHandler, _extends({\n      enabled: layout.width !== 0 && gestureEnabled,\n      onGestureEvent: handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange\n    }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n      style: [styles.container, cardStyle]\n    }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n      style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n        backgroundColor\n      }, shadowStyle],\n      pointerEvents: \"none\"\n    }) : null, React.createElement(CardSheet, {\n      ref: this.contentRef,\n      enabled: pageOverflowEnabled,\n      layout: layout,\n      style: contentStyle\n    }, children))))));\n  }\n}\n_defineProperty(Card, \"defaultProps\", {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: ({\n    style\n  }) => style ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.overlay, style]\n  }) : null\n});\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"names":["React","Animated","View","StyleSheet","Platform","InteractionManager","Color","CardSheet","PanGestureHandler","GestureState","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","OS","Card","Component","constructor","args","_defineProperty","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransitionStart","toValue","getAnimateToValue","_objectSpread","lastToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","config","isInteraction","start","finished","handleEndInteraction","isCurrentlyMounted","forceUpdate","enabled","_this$contentRef$curr","pointerEvents","contentRef","current","setNativeProps","interactionHandle","undefined","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","BEGAN","isSwiping","setValue","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","isClosing","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","gestureActivationCriteria","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","_this$props","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","containerStyle","customContainerStyle","contentStyle","rest","_objectWithoutProperties","interpolatedStyle","getInterpolatedStyle","animationContext","getCardAnimationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","flatten","isTransparent","alpha","createElement","Provider","value","style","opacity","collapsable","_extends","absoluteFill","styles","container","onGestureEvent","onHandlerStateChange","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","ref","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransitionStart?.({ closing });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}