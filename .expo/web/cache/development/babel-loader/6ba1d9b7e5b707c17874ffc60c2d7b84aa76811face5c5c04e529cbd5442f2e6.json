{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nconst EPSILON = 0.1;\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec\n}) {\n  React.useEffect(() => {\n    onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n  }, [active, onPageChangeConfirm]);\n  const handleOpen = () => {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, false);\n    onOpenRoute({\n      route: scene.route\n    });\n  };\n  const handleClose = () => {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, true);\n    onCloseRoute({\n      route: scene.route\n    });\n  };\n  const handleGestureBegin = () => {\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route: scene.route\n    });\n  };\n  const handleGestureCanceled = () => {\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route: scene.route\n    });\n  };\n  const handleGestureEnd = () => {\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route: scene.route\n    });\n  };\n  const handleTransitionStart = ({\n    closing\n  }) => {\n    if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: scene.route\n    }, closing);\n  };\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  const {\n    colors\n  } = useTheme();\n  const [pointerEvents, setPointerEvents] = React.useState('box-none');\n  React.useEffect(() => {\n    var _scene$progress$next, _scene$progress$next$;\n    const listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, ({\n      value\n    }) => {\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return () => {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransitionStart: handleTransitionStart,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: StyleSheet.absoluteFill\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout,\n    insets,\n    scenes: [previousScene, scene],\n    getPreviousScene,\n    getFocusedRoute,\n    gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\nexport default React.memo(CardContainer);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","View","StyleSheet","useTheme","Card","HeaderHeightContext","HeaderShownContext","PreviousSceneContext","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","useEffect","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransitionStart","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","_scene$progress$next","_scene$progress$next$","listener","progress","next","addListener","call","value","_scene$progress$next2","_scene$progress$next3","removeListener","isParentHeaderShown","useContext","isCurrentHeaderShown","previousScene","createElement","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","absoluteFill","styles","container","Provider","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/stack/lib/module/views/Stack/CardContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleGestureBegin = () => {\n    onPageChangeStart?.();\n    onGestureStart?.({ route: scene.route });\n  };\n\n  const handleGestureCanceled = () => {\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route: scene.route });\n  };\n\n  const handleGestureEnd = () => {\n    onGestureEnd?.({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}