{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { NavigationHelpersContext, StackActions } from '@react-navigation/native';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nconst GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nconst isArrayEqual = (a, b) => a.length === b.length && a.every((it, index) => it === b[index]);\nexport default class StackView extends React.Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty(this, \"getGesturesEnabled\", ({\n      route\n    }) => {\n      const descriptor = this.state.descriptors[route.key];\n      if (descriptor) {\n        const {\n          gestureEnabled,\n          animationEnabled\n        } = descriptor.options;\n        if (animationEnabled === false) {\n          return false;\n        }\n        return gestureEnabled !== false;\n      }\n      return false;\n    });\n    _defineProperty(this, \"getPreviousRoute\", ({\n      route\n    }) => {\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      const routes = this.state.routes.filter(r => r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key));\n      const index = routes.findIndex(r => r.key === route.key);\n      return routes[index - 1];\n    });\n    _defineProperty(this, \"renderScene\", ({\n      route\n    }) => {\n      const descriptor = this.state.descriptors[route.key] || this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      return descriptor.render();\n    });\n    _defineProperty(this, \"renderHeader\", props => {\n      return React.createElement(HeaderContainer, props);\n    });\n    _defineProperty(this, \"handleOpenRoute\", ({\n      route\n    }) => {\n      const {\n        state,\n        navigation\n      } = this.props;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      if (closingRouteKeys.some(key => key === route.key) && replacingRouteKeys.every(key => key !== route.key) && state.routeNames.includes(route.name) && !state.routes.some(r => r.key === route.key)) {\n        navigation.navigate(route);\n      } else {\n        this.setState(state => ({\n          routes: state.replacingRouteKeys.length ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key)) : state.routes,\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n          replacingRouteKeys: []\n        }));\n      }\n    });\n    _defineProperty(this, \"handleCloseRoute\", ({\n      route\n    }) => {\n      const {\n        state,\n        navigation\n      } = this.props;\n      if (state.routes.some(r => r.key === route.key)) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        this.setState(state => ({\n          routes: state.routes.filter(r => r.key !== route.key),\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key)\n        }));\n      }\n    });\n    _defineProperty(this, \"handleTransitionStart\", ({\n      route\n    }, closing) => this.props.navigation.emit({\n      type: 'transitionStart',\n      data: {\n        closing\n      },\n      target: route.key\n    }));\n    _defineProperty(this, \"handleTransitionEnd\", ({\n      route\n    }, closing) => this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: {\n        closing\n      },\n      target: route.key\n    }));\n    _defineProperty(this, \"handleGestureStart\", ({\n      route\n    }) => {\n      this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleGestureEnd\", ({\n      route\n    }) => {\n      this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleGestureCancel\", ({\n      route\n    }) => {\n      this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n  }\n  static getDerivedStateFromProps(props, state) {\n    if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(r => r.key), state.previousRoutes.map(r => r.key))) && state.routes.length) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce((acc, route) => {\n          acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n          return acc;\n        }, {});\n        previousDescriptors = props.descriptors;\n      }\n      if (props.state.routes !== state.previousRoutes) {\n        const map = props.state.routes.reduce((acc, route) => {\n          acc[route.key] = route;\n          return acc;\n        }, {});\n        routes = state.routes.map(route => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors\n      };\n    }\n    let routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes\n    } = state;\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n    const nextFocusedRoute = routes[routes.length - 1];\n    const isAnimationEnabled = key => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n    const getAnimationTypeForReplace = key => {\n      var _descriptor$options$a;\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n    };\n    if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n      if (!previousRoutes.some(r => r.key === nextFocusedRoute.key)) {\n        if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n          closingRouteKeys = closingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n            openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n              openingRouteKeys = openingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [...replacingRouteKeys, previousFocusedRoute.key];\n              closingRouteKeys = closingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n        if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n          openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {}\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      routes = routes.slice();\n      routes.splice(routes.length - 1, 0, ...state.routes.filter(({\n        key\n      }) => isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false));\n    }\n    if (!routes.length) {\n      throw new Error('There should always be at least one route in the navigation state.');\n    }\n    const descriptors = routes.reduce((acc, route) => {\n      acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n      return acc;\n    }, {});\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors\n    };\n  }\n  render() {\n    const _this$props = this.props,\n      {\n        state,\n        navigation,\n        keyboardHandlingEnabled,\n        mode = 'card',\n        headerMode = mode === 'card' && Platform.OS === 'ios' ? 'float' : 'screen',\n        descriptors: _\n      } = _this$props,\n      rest = _objectWithoutProperties(_this$props, [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\", \"headerMode\", \"descriptors\"]);\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys\n    } = this.state;\n    return React.createElement(NavigationHelpersContext.Provider, {\n      value: navigation\n    }, React.createElement(GestureHandlerWrapper, {\n      style: styles.container\n    }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaConsumer, null, insets => React.createElement(KeyboardManager, {\n      enabled: keyboardHandlingEnabled !== false\n    }, props => React.createElement(CardStack, _extends({\n      mode: mode,\n      insets: insets,\n      getPreviousRoute: this.getPreviousRoute,\n      getGesturesEnabled: this.getGesturesEnabled,\n      routes: routes,\n      openingRouteKeys: openingRouteKeys,\n      closingRouteKeys: closingRouteKeys,\n      onOpenRoute: this.handleOpenRoute,\n      onCloseRoute: this.handleCloseRoute,\n      onTransitionStart: this.handleTransitionStart,\n      onTransitionEnd: this.handleTransitionEnd,\n      renderHeader: this.renderHeader,\n      renderScene: this.renderScene,\n      headerMode: headerMode,\n      state: state,\n      descriptors: descriptors,\n      onGestureStart: this.handleGestureStart,\n      onGestureEnd: this.handleGestureEnd,\n      onGestureCancel: this.handleGestureCancel\n    }, rest, props)))))));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","View","Platform","StyleSheet","SafeAreaConsumer","NavigationHelpersContext","StackActions","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","constructor","args","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","filter","r","includes","findIndex","props","render","createElement","navigation","some","routeNames","name","navigate","setState","dispatch","_objectSpread","pop","source","target","closing","emit","type","data","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","_descriptor$options$a","animationTypeForReplace","splice","Error","_this$props","keyboardHandlingEnabled","mode","headerMode","OS","_","rest","_objectWithoutProperties","Provider","value","style","styles","container","insets","enabled","_extends","getPreviousRoute","getGesturesEnabled","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","onTransitionStart","handleTransitionStart","onTransitionEnd","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","create","flex"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/stack/lib/module/views/Stack/StackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  NavigationHelpersContext,\n  StackActions,\n  StackNavigationState,\n  Route,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== false;\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <CardStack\n                      mode={mode}\n                      insets={insets as EdgeInsets}\n                      getPreviousRoute={this.getPreviousRoute}\n                      getGesturesEnabled={this.getGesturesEnabled}\n                      routes={routes}\n                      openingRouteKeys={openingRouteKeys}\n                      closingRouteKeys={closingRouteKeys}\n                      onOpenRoute={this.handleOpenRoute}\n                      onCloseRoute={this.handleCloseRoute}\n                      onTransitionStart={this.handleTransitionStart}\n                      onTransitionEnd={this.handleTransitionEnd}\n                      renderHeader={this.renderHeader}\n                      renderScene={this.renderScene}\n                      headerMode={headerMode}\n                      state={state}\n                      descriptors={descriptors}\n                      onGestureStart={this.handleGestureStart}\n                      onGestureEnd={this.handleGestureEnd}\n                      onGestureCancel={this.handleGestureCancel}\n                      {...rest}\n                      {...props}\n                    />\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}