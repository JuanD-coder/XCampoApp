{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport const shouldPreventRemove = (emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) => {\n  var _action$VISITED_ROUTE;\n  const nextRouteKeys = nextRoutes.map(route => route.key);\n  const removedRoutes = currentRoutes.filter(route => !nextRouteKeys.includes(route.key)).reverse();\n  const visitedRouteKeys = (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();\n  const beforeRemoveAction = Object.assign({}, action, {\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys\n  });\n  for (const route of removedRoutes) {\n    var _beforeRemoveListener;\n    if (visitedRouteKeys.has(route.key)) {\n      continue;\n    }\n    const isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n    if (isPrevented) {\n      return true;\n    }\n    visitedRouteKeys.add(route.key);\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: {\n        action: beforeRemoveAction\n      },\n      canPreventDefault: true\n    });\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n  return false;\n};\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners\n}) {\n  const {\n    addKeyedListener\n  } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, action => {\n        const state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","NavigationRouteContext","VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","currentRoutes","nextRoutes","action","_action$VISITED_ROUTE","nextRouteKeys","map","route","key","removedRoutes","filter","includes","reverse","visitedRouteKeys","Set","beforeRemoveAction","Object","assign","_beforeRemoveListener","has","isPrevented","call","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","getState","addKeyedListener","useContext","routeKey","useEffect","state","routes"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/core/lib/module/useOnPreventRemove.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAKA,OAAOC,wBAAP,MAEO,4BAFP;AAGA,OAAOC,sBAAP,MAAmC,0BAAnC;AAUA,MAAMC,kBAAkB,GAAGC,MAAM,CAAC,oBAAD,CAAjC;AAEA,OAAO,MAAMC,mBAAmB,GAAGA,CACjCC,OADiC,EAEjCC,qBAFiC,EAGjCC,aAHiC,EAIjCC,UAJiC,EAKjCC,MALiC,KAM9B;EAAA,IAAAC,qBAAA;EACH,MAAMC,aAAa,GAAGH,UAAU,CAACI,GAAX,CAAgBC,KAAD,IAAWA,KAAK,CAACC,GAAhC,CAAtB;EAGA,MAAMC,aAAa,GAAGR,aAAa,CAChCS,MADmB,CACXH,KAAD,IAAW,CAACF,aAAa,CAACM,QAAd,CAAuBJ,KAAK,CAACC,GAA7B,CADA,EAEnBI,OAFmB,EAAtB;EAIA,MAAMC,gBAA6B,IAAAT,qBAAA,GAEjCD,MAAM,CAACP,kBAAD,CAF2B,cAAAQ,qBAAA,cAAAA,qBAAA,GAEH,IAAIU,GAAJ,EAFhC;EAIA,MAAMC,kBAAkB,GAAAC,MAAA,CAAAC,MAAA,KACnBd,MADsB;IAEzB,CAACP,kBAAD,GAAsBiB;EAAA,EAFxB;EAKA,KAAK,MAAMN,KAAX,IAAoBE,aAApB,EAAmC;IAAA,IAAAS,qBAAA;IACjC,IAAIL,gBAAgB,CAACM,GAAjB,CAAqBZ,KAAK,CAACC,GAA3B,CAAJ,EAAqC;MAEnC;IACD;IAGD,MAAMY,WAAW,IAAAF,qBAAA,GAAGlB,qBAAqB,CAACO,KAAK,CAACC,GAAP,CAAxB,cAAAU,qBAAA,uBAAGA,qBAAA,CAAAG,IAAA,CAAArB,qBAAqB,EAAce,kBAAd,CAAzC;IAEA,IAAIK,WAAJ,EAAiB;MACf,OAAO,IAAP;IACD;IAEDP,gBAAgB,CAACS,GAAjB,CAAqBf,KAAK,CAACC,GAA3B;IAEA,MAAMe,KAAK,GAAGxB,OAAO,CAACyB,IAAR,CAAa;MACzBC,IAAI,EAAE,cADmB;MAEzBC,MAAM,EAAEnB,KAAK,CAACC,GAFW;MAGzBmB,IAAI,EAAE;QAAExB,MAAM,EAAEY;MAAV,CAHmB;MAIzBa,iBAAiB,EAAE;IAJM,CAAb,CAAd;IAOA,IAAIL,KAAK,CAACM,gBAAV,EAA4B;MAC1B,OAAO,IAAP;IACD;EACF;EAED,OAAO,KAAP;AACD,CAnDM;AAqDP,eAAe,SAASC,kBAATA,CAA4B;EACzCC,QADyC;EAEzChC,OAFyC;EAGzCC;AAHyC,CAA5B,EAIH;EACV,MAAM;IAAEgC;EAAF,IAAuBvC,KAAK,CAACwC,UAAN,CAAiBvC,wBAAjB,CAA7B;EACA,MAAMa,KAAK,GAAGd,KAAK,CAACwC,UAAN,CAAiBtC,sBAAjB,CAAd;EACA,MAAMuC,QAAQ,GAAG3B,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEC,GAAxB;EAEAf,KAAK,CAAC0C,SAAN,CAAgB,MAAM;IACpB,IAAID,QAAJ,EAAc;MACZ,OAAOF,gBAAP,aAAOA,gBAAP,uBAAOA,gBAAgB,CAAG,cAAH,EAAmBE,QAAnB,EAA8B/B,MAAD,IAAY;QAC9D,MAAMiC,KAAK,GAAGL,QAAQ,EAAtB;QAEA,OAAOjC,mBAAmB,CACxBC,OADwB,EAExBC,qBAFwB,EAGxBoC,KAAK,CAACC,MAHkB,EAIxB,EAJwB,EAKxBlC,MALwB,CAA1B;MAOD,CAVsB,CAAvB;IAWD;EACF,CAdD,EAcG,CAAC6B,gBAAD,EAAmBhC,qBAAnB,EAA0CD,OAA1C,EAAmDgC,QAAnD,EAA6DG,QAA7D,CAdH;AAeD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}