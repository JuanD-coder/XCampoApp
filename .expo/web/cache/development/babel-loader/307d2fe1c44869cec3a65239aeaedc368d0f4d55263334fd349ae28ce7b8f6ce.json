{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nexport default class KeyboardManager extends React.Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"previouslyFocusedTextInput\", null);\n    _defineProperty(this, \"startTimestamp\", 0);\n    _defineProperty(this, \"keyboardTimeout\", void 0);\n    _defineProperty(this, \"clearKeyboardTimeout\", () => {\n      if (this.keyboardTimeout !== undefined) {\n        clearTimeout(this.keyboardTimeout);\n        this.keyboardTimeout = undefined;\n      }\n    });\n    _defineProperty(this, \"handlePageChangeStart\", () => {\n      if (!this.props.enabled) {\n        return;\n      }\n      this.clearKeyboardTimeout();\n      const input = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n      TextInput.State.blurTextInput(input);\n      this.previouslyFocusedTextInput = input;\n      this.startTimestamp = Date.now();\n    });\n    _defineProperty(this, \"handlePageChangeConfirm\", () => {\n      if (!this.props.enabled) {\n        return;\n      }\n      this.clearKeyboardTimeout();\n      const input = this.previouslyFocusedTextInput;\n      if (Platform.OS === 'android') {\n        Keyboard.dismiss();\n      } else if (input) {\n        TextInput.State.blurTextInput(input);\n      }\n      this.previouslyFocusedTextInput = null;\n    });\n    _defineProperty(this, \"handlePageChangeCancel\", () => {\n      if (!this.props.enabled) {\n        return;\n      }\n      this.clearKeyboardTimeout();\n      const input = this.previouslyFocusedTextInput;\n      if (input) {\n        if (Date.now() - this.startTimestamp < 100) {\n          this.keyboardTimeout = setTimeout(() => {\n            TextInput.State.focusTextInput(input);\n            this.previouslyFocusedTextInput = null;\n          }, 100);\n        } else {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = null;\n        }\n      }\n    });\n  }\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  }\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel\n    });\n  }\n}","map":{"version":3,"names":["React","TextInput","Platform","Keyboard","KeyboardManager","Component","constructor","args","_defineProperty","keyboardTimeout","undefined","clearTimeout","props","enabled","clearKeyboardTimeout","input","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","startTimestamp","Date","now","OS","dismiss","setTimeout","focusTextInput","componentWillUnmount","render","children","onPageChangeStart","handlePageChangeStart","onPageChangeConfirm","handlePageChangeConfirm","onPageChangeCancel","handlePageChangeCancel"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/stack/lib/module/views/KeyboardManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TextInput, Platform, Keyboard } from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: () => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\nexport default class KeyboardManager extends React.Component<Props> {\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  }\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n  private startTimestamp: number = 0;\n  private keyboardTimeout: any;\n\n  private clearKeyboardTimeout = () => {\n    if (this.keyboardTimeout !== undefined) {\n      clearTimeout(this.keyboardTimeout);\n      this.keyboardTimeout = undefined;\n    }\n  };\n\n  private handlePageChangeStart = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // @ts-expect-error: currentlyFocusedInput is pretty new, so not in the type definitions\n    const input = TextInput.State.currentlyFocusedInput\n      ? // @ts-expect-error\n        TextInput.State.currentlyFocusedInput()\n      : TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n\n    // Store timestamp for touch start\n    this.startTimestamp = Date.now();\n  };\n\n  private handlePageChangeConfirm = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    const input = this.previouslyFocusedTextInput;\n\n    if (Platform.OS === 'android') {\n      Keyboard.dismiss();\n    } else if (input) {\n      TextInput.State.blurTextInput(input);\n    }\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = null;\n  };\n\n  private handlePageChangeCancel = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - this.startTimestamp < 100) {\n        this.keyboardTimeout = setTimeout(() => {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = null;\n        }, 100);\n      } else {\n        TextInput.State.focusTextInput(input);\n        this.previouslyFocusedTextInput = null;\n      }\n    }\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,SAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,QAAA;AAYA,eAAe,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAAqD;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAAC,eAAA,qCAOd,IAPc;IAAAA,eAAA,yBAQjC,CARiC;IAAAA,eAAA;IAAAA,eAAA,+BAWnC,MAAM;MACnC,IAAI,KAAKC,eAAL,KAAyBC,SAA7B,EAAwC;QACtCC,YAAY,CAAC,KAAKF,eAAN,CAAZ;QACA,KAAKA,eAAL,GAAuBC,SAAvB;MACD;IACF,CAhBiE;IAAAF,eAAA,gCAkBlC,MAAM;MACpC,IAAI,CAAC,KAAKI,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;MAED,KAAKC,oBAAL;MAGA,MAAMC,KAAK,GAAGd,SAAS,CAACe,KAAV,CAAgBC,qBAAhB,GAEVhB,SAAS,CAACe,KAAV,CAAgBC,qBAAhB,EAFU,GAGVhB,SAAS,CAACe,KAAV,CAAgBE,qBAAhB,EAHJ;MAMAjB,SAAS,CAACe,KAAV,CAAgBG,aAAhB,CAA8BJ,KAA9B;MAGA,KAAKK,0BAAL,GAAkCL,KAAlC;MAGA,KAAKM,cAAL,GAAsBC,IAAI,CAACC,GAAL,EAAtB;IACD,CAvCiE;IAAAf,eAAA,kCAyChC,MAAM;MACtC,IAAI,CAAC,KAAKI,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;MAED,KAAKC,oBAAL;MAEA,MAAMC,KAAK,GAAG,KAAKK,0BAAnB;MAEA,IAAIlB,QAAQ,CAACsB,EAAT,KAAgB,SAApB,EAA+B;QAC7BrB,QAAQ,CAACsB,OAAT;MACD,CAFD,MAEO,IAAIV,KAAJ,EAAW;QAChBd,SAAS,CAACe,KAAV,CAAgBG,aAAhB,CAA8BJ,KAA9B;MACD;MAGD,KAAKK,0BAAL,GAAkC,IAAlC;IACD,CA1DiE;IAAAZ,eAAA,iCA4DjC,MAAM;MACrC,IAAI,CAAC,KAAKI,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;MAED,KAAKC,oBAAL;MAGA,MAAMC,KAAK,GAAG,KAAKK,0BAAnB;MAEA,IAAIL,KAAJ,EAAW;QAQT,IAAIO,IAAI,CAACC,GAAL,KAAa,KAAKF,cAAlB,GAAmC,GAAvC,EAA4C;UAC1C,KAAKZ,eAAL,GAAuBiB,UAAU,CAAC,MAAM;YACtCzB,SAAS,CAACe,KAAV,CAAgBW,cAAhB,CAA+BZ,KAA/B;YACA,KAAKK,0BAAL,GAAkC,IAAlC;UACD,CAHgC,EAG9B,GAH8B,CAAjC;QAID,CALD,MAKO;UACLnB,SAAS,CAACe,KAAV,CAAgBW,cAAhB,CAA+BZ,KAA/B;UACA,KAAKK,0BAAL,GAAkC,IAAlC;QACD;MACF;IACF,CAxFiE;EAAA;EAClEQ,oBAAoBA,CAAA,EAAG;IACrB,KAAKd,oBAAL;EACD;EAuFDe,MAAMA,CAAA,EAAG;IACP,OAAO,KAAKjB,KAAL,CAAWkB,QAAX,CAAoB;MACzBC,iBAAiB,EAAE,KAAKC,qBADC;MAEzBC,mBAAmB,EAAE,KAAKC,uBAFD;MAGzBC,kBAAkB,EAAE,KAAKC;IAHA,CAApB,CAAP;EAKD;AAhGiE","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}