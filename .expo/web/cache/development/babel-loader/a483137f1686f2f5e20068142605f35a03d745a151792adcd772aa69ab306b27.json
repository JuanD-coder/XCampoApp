{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nconst BaseRouter = {\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          const index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n          if (index === -1) {\n            return null;\n          }\n          return Object.assign({}, state, {\n            routes: state.routes.map((r, i) => i === index ? Object.assign({}, r, {\n              params: Object.assign({}, r.params, action.payload.params)\n            }) : r)\n          });\n        }\n      case 'RESET':\n        {\n          const nextState = action.payload;\n          if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n            return null;\n          }\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n              return null;\n            }\n            return Object.assign({}, nextState, {\n              routes: nextState.routes.map(route => route.key ? route : Object.assign({}, route, {\n                key: \"\".concat(route.name, \"-\").concat(nanoid())\n              }))\n            });\n          }\n          return nextState;\n        }\n      default:\n        return null;\n    }\n  },\n  shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n};\nexport default BaseRouter;","map":{"version":3,"names":["nanoid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","Object","assign","map","i","params","payload","nextState","length","some","route","routeNames","includes","name","stale","concat","shouldActionChangeFocus"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/routers/lib/module/BaseRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAWA,MAAMC,UAAU,GAAG;EACjBC,iBAAiBA,CACfC,KADe,EAEfC,MAFe,EAGqB;IACpC,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,YAAL;QAAmB;UACjB,MAAMC,KAAK,GAAGF,MAAM,CAACG,MAAP,GACVJ,KAAK,CAACK,MAAN,CAAaC,SAAb,CAAwBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUP,MAAM,CAACG,MAA/C,CADU,GAEVJ,KAAK,CAACG,KAFV;UAIA,IAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;YAChB,OAAO,IAAP;UACD;UAED,OAAAM,MAAA,CAAAC,MAAA,KACKV,KADE;YAELK,MAAM,EAAEL,KAAK,CAACK,MAAN,CAAaM,GAAb,CAAiB,CAACJ,CAAD,EAAIK,CAAJ,KACvBA,CAAC,KAAKT,KAAN,GAAAM,MAAA,CAAAC,MAAA,KACSH,CAAL;cAAQM,MAAM,EAAAJ,MAAA,CAAAC,MAAA,KAAOH,CAAC,CAACM,MAAP,EAAkBZ,MAAM,CAACa,OAAP,CAAeD,MAAA;YAAjC,KAChBN,CAHE;UAAA;QAMX;MAED,KAAK,OAAL;QAAc;UACZ,MAAMQ,SAAS,GAAGd,MAAM,CAACa,OAAzB;UAEA,IACEC,SAAS,CAACV,MAAV,CAAiBW,MAAjB,KAA4B,CAA5B,IACAD,SAAS,CAACV,MAAV,CAAiBY,IAAjB,CACGC,KAAD,IAA6B,CAAClB,KAAK,CAACmB,UAAN,CAAiBC,QAAjB,CAA0BF,KAAK,CAACG,IAAhC,CADhC,CAFF,EAKE;YACA,OAAO,IAAP;UACD;UAED,IAAIN,SAAS,CAACO,KAAV,KAAoB,KAAxB,EAA+B;YAC7B,IACEtB,KAAK,CAACmB,UAAN,CAAiBH,MAAjB,KAA4BD,SAAS,CAACI,UAAV,CAAqBH,MAAjD,IACAD,SAAS,CAACI,UAAV,CAAqBF,IAArB,CACGI,IAAD,IAAU,CAACrB,KAAK,CAACmB,UAAN,CAAiBC,QAAjB,CAA0BC,IAA1B,CADb,CAFF,EAKE;cACA,OAAO,IAAP;YACD;YAED,OAAAZ,MAAA,CAAAC,MAAA,KACKK,SADE;cAELV,MAAM,EAAEU,SAAS,CAACV,MAAV,CAAiBM,GAAjB,CAAsBO,KAAD,IAC3BA,KAAK,CAACV,GAAN,GAAYU,KAAZ,GAAAT,MAAA,CAAAC,MAAA,KAAyBQ,KAAL;gBAAYV,GAAG,KAAAe,MAAA,CAAKL,KAAK,CAACG,IAAX,OAAAE,MAAA,CAAmB1B,MAAM,EAAzB;cAAA,EAD7B;YAAA;UAIX;UAED,OAAOkB,SAAP;QACD;MAED;QACE,OAAO,IAAP;IAtDJ;EAwDD,CA7DgB;EA+DjBS,uBAAuBA,CAACvB,MAAD,EAAiC;IACtD,OAAOA,MAAM,CAACC,IAAP,KAAgB,UAAvB;EACD;AAjEgB,CAAnB;AAoEA,eAAeJ,UAAf","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}