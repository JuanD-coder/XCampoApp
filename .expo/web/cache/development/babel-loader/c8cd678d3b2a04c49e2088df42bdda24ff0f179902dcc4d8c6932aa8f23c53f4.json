{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  pop(count = 1) {\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  const router = Object.assign({}, BaseRouter, {\n    type: 'stack',\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: 0,\n        routeNames,\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => Object.assign({}, route, {\n        key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n        params: routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params) : route.params\n      }));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n    getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList\n    }) {\n      const routes = state.routes.filter(route => routeNames.includes(route.name));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return Object.assign({}, state, {\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return Object.assign({}, state, {\n        index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return Object.assign({}, state, {\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : \"\".concat(name, \"-\").concat(nanoid()),\n                name,\n                params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], params) : params\n              } : route)\n            });\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            const route = action.payload.name && action.payload.key ? state.routes.find(route => route.name === action.payload.name && route.key === action.payload.key) : id ? state.routes.find(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n              params: route.params\n            }))) : undefined;\n            let routes;\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push(Object.assign({}, route, {\n                params: action.payload.params !== undefined ? Object.assign({}, route.params, action.payload.params) : route.params\n              }));\n            } else {\n              var _action$payload$key;\n              routes = [...state.routes, {\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }];\n            }\n            return Object.assign({}, state, {\n              index: routes.length - 1,\n              routes\n            });\n          }\n          return null;\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return Object.assign({}, state, {\n                index: routes.length - 1,\n                routes\n              });\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n          if (action.payload.key || action.payload.name) {\n            let index = -1;\n            const getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              })));\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (index === -1 && action.payload.name !== undefined) {\n              var _action$payload$key2;\n              const routes = [...state.routes, {\n                key: (_action$payload$key2 = action.payload.key) !== null && _action$payload$key2 !== void 0 ? _action$payload$key2 : \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }];\n              return Object.assign({}, state, {\n                routes,\n                index: routes.length - 1\n              });\n            }\n            const route = state.routes[index];\n            let params;\n            if (action.payload.merge === false) {\n              params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n            } else {\n              params = action.payload.params ? Object.assign({}, route.params, action.payload.params) : route.params;\n            }\n            return Object.assign({}, state, {\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params ? Object.assign({}, route, {\n                params\n              }) : state.routes[index]]\n            });\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","Object","assign","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","concat","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","_action$payload$key","max","_action$payload$key2","merge","actionCreators"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/routers/lib/module/StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<\n  ParamList extends ParamListBase\n> = NavigationState<ParamList> & {\n  /**\n   * Type of the router, in this case, it's stack.\n   */\n  type: 'stack';\n};\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = state.routes.filter((route) =>\n        routeNames.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route =\n              action.payload.name && action.payload.key\n                ? state.routes.find(\n                    (route) =>\n                      route.name === action.payload.name &&\n                      route.key === action.payload.key\n                  )\n                : id\n                ? state.routes.find(\n                    (route) =>\n                      route.name === action.payload.name &&\n                      id === getId?.({ params: route.params })\n                  )\n                : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  action.payload.params !== undefined\n                    ? {\n                        ...route.params,\n                        ...action.payload.params,\n                      }\n                    : route.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge === false) {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            } else {\n              params = action.payload.params\n                ? {\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params\n                  ? { ...route, params }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}