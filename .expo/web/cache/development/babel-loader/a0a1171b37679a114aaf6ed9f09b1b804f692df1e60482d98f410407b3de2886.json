{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport CardContainer from './CardContainer';\nimport { DefaultTransition, ModalTransition } from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nconst EPSILON = 0.01;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nconst getHeaderHeights = (routes, insets, descriptors, layout, previous) => {\n  return routes.reduce((acc, curr) => {\n    const {\n      options = {}\n    } = descriptors[curr.key] || {};\n    const style = StyleSheet.flatten(options.headerStyle || {});\n    const height = typeof style.height === 'number' ? style.height : previous[curr.key];\n    const safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n    const {\n      headerStatusBarHeight = safeAreaInsets.top\n    } = options;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nconst getDistanceFromOptions = (mode, layout, descriptor) => {\n  const {\n    gestureDirection = mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection\n  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n  return getDistanceForDirection(layout, gestureDirection);\n};\nconst getProgressFromGesture = (mode, gesture, layout, descriptor) => {\n  const distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nexport default class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n    const gestures = props.routes.reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const {\n        animationEnabled\n      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n      return acc;\n    }, {});\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n        const oldScene = state.scenes[index];\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n            next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every((it, i) => {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n    };\n  }\n  constructor(_props) {\n    super(_props);\n    _defineProperty(this, \"handleLayout\", e => {\n      const {\n        height,\n        width\n      } = e.nativeEvent.layout;\n      const layout = {\n        width,\n        height\n      };\n      this.setState((state, props) => {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(this, \"handleHeaderLayout\", ({\n      route,\n      height\n    }) => {\n      this.setState(({\n        headerHeights\n      }) => {\n        const previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, {\n            [route.key]: height\n          })\n        };\n      });\n    });\n    _defineProperty(this, \"getFocusedRoute\", () => {\n      const {\n        state\n      } = this.props;\n      return state.routes[state.index];\n    });\n    _defineProperty(this, \"getPreviousScene\", ({\n      route\n    }) => {\n      const {\n        getPreviousRoute\n      } = this.props;\n      const {\n        scenes\n      } = this.state;\n      const previousRoute = getPreviousRoute({\n        route\n      });\n      if (previousRoute) {\n        const previousScene = scenes.find(scene => scene.route.key === previousRoute.key);\n        return previousScene;\n      }\n      return undefined;\n    });\n    const {\n      height: _height = 0,\n      width: _width = 0\n    } = Dimensions.get('window');\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: this.props.descriptors,\n      headerHeights: {}\n    };\n  }\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    let defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n        headerStyleInterpolator: forNoAnimationHeader\n      });\n    }\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left\n    } = focusedOptions.safeAreaInsets || {};\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n    return React.createElement(HeaderShownContext.Consumer, null, isParentHeaderShown => {\n      const isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(scene => {\n        const {\n          descriptor\n        } = scene;\n        const options = descriptor ? descriptor.options : {};\n        const {\n          headerTransparent,\n          headerShown = isParentHeaderShown === false\n        } = options;\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n        return false;\n      }) : false;\n      const floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout,\n        insets: {\n          top,\n          right,\n          bottom,\n          left\n        },\n        scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && styles.absolute]\n      })) : null;\n      return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map((route, index, self) => {\n        const focused = focusedRoute.key === route.key;\n        const gesture = gestures[route.key];\n        const scene = scenes[index];\n        const isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1;\n        const {\n          safeAreaInsets,\n          headerShown = isParentHeaderShown === false,\n          headerTransparent,\n          cardShadowEnabled,\n          cardOverlayEnabled,\n          cardOverlay,\n          cardStyle,\n          animationEnabled,\n          gestureResponseDistance,\n          gestureVelocityImpact,\n          gestureDirection = defaultTransitionPreset.gestureDirection,\n          transitionSpec = defaultTransitionPreset.transitionSpec,\n          cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n          headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator\n        } = scene.descriptor ? scene.descriptor.options : {};\n        let transitionConfig = {\n          gestureDirection,\n          transitionSpec,\n          cardStyleInterpolator,\n          headerStyleInterpolator\n        };\n        if (index !== self.length - 1) {\n          const nextScene = scenes[index + 1];\n          if (nextScene) {\n            const {\n              animationEnabled,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator\n            } = nextScene.descriptor ? nextScene.descriptor.options : {};\n            transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator\n            };\n          }\n        }\n        const {\n          top: safeAreaInsetTop = insets.top,\n          right: safeAreaInsetRight = insets.right,\n          bottom: safeAreaInsetBottom = insets.bottom,\n          left: safeAreaInsetLeft = insets.left\n        } = safeAreaInsets || {};\n        const headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          onHeaderHeightChange: this.handleHeaderLayout,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    });\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["React","Animated","StyleSheet","Dimensions","Platform","MaybeScreenContainer","MaybeScreen","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","HeaderShownContext","getDistanceForDirection","EPSILON","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","style","flatten","headerStyle","height","safeAreaInsets","_objectSpread","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","_props","_defineProperty","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","_height","_width","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","isScreensEnabled","OS","createElement","Consumer","isParentHeaderShown","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","Fragment","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","enabled","container","onLayout","handleLayout","focused","isScreenActive","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","active","pointerEvents","_extends","closing","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","create","flex","position","zIndex"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <HeaderShownContext.Consumer>\n        {(isParentHeaderShown) => {\n          const isFloatHeaderAbsolute =\n            headerMode === 'float'\n              ? this.state.scenes.slice(-2).some((scene) => {\n                  const { descriptor } = scene;\n                  const options = descriptor ? descriptor.options : {};\n                  const {\n                    headerTransparent,\n                    headerShown = isParentHeaderShown === false,\n                  } = options;\n\n                  if (headerTransparent || headerShown === false) {\n                    return true;\n                  }\n\n                  return false;\n                })\n              : false;\n\n          const floatingHeader =\n            headerMode === 'float' ? (\n              <React.Fragment key=\"header\">\n                {renderHeader({\n                  mode: 'float',\n                  layout,\n                  insets: { top, right, bottom, left },\n                  scenes,\n                  getPreviousScene: this.getPreviousScene,\n                  getFocusedRoute: this.getFocusedRoute,\n                  onContentHeightChange: this.handleHeaderLayout,\n                  gestureDirection:\n                    focusedOptions.gestureDirection !== undefined\n                      ? focusedOptions.gestureDirection\n                      : defaultTransitionPreset.gestureDirection,\n                  styleInterpolator:\n                    focusedOptions.headerStyleInterpolator !== undefined\n                      ? focusedOptions.headerStyleInterpolator\n                      : defaultTransitionPreset.headerStyleInterpolator,\n                  style: [\n                    styles.floating,\n                    isFloatHeaderAbsolute && styles.absolute,\n                  ],\n                })}\n              </React.Fragment>\n            ) : null;\n\n          return (\n            <React.Fragment>\n              {isFloatHeaderAbsolute ? null : floatingHeader}\n              <MaybeScreenContainer\n                enabled={isScreensEnabled}\n                style={styles.container}\n                onLayout={this.handleLayout}\n              >\n                {routes.map((route, index, self) => {\n                  const focused = focusedRoute.key === route.key;\n                  const gesture = gestures[route.key];\n                  const scene = scenes[index];\n\n                  const isScreenActive = scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1;\n\n                  const {\n                    safeAreaInsets,\n                    headerShown = isParentHeaderShown === false,\n                    headerTransparent,\n                    cardShadowEnabled,\n                    cardOverlayEnabled,\n                    cardOverlay,\n                    cardStyle,\n                    animationEnabled,\n                    gestureResponseDistance,\n                    gestureVelocityImpact,\n                    gestureDirection = defaultTransitionPreset.gestureDirection,\n                    transitionSpec = defaultTransitionPreset.transitionSpec,\n                    cardStyleInterpolator = animationEnabled === false\n                      ? forNoAnimationCard\n                      : defaultTransitionPreset.cardStyleInterpolator,\n                    headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                  } = scene.descriptor\n                    ? scene.descriptor.options\n                    : ({} as StackNavigationOptions);\n\n                  let transitionConfig = {\n                    gestureDirection,\n                    transitionSpec,\n                    cardStyleInterpolator,\n                    headerStyleInterpolator,\n                  };\n\n                  // When a screen is not the last, it should use next screen's transition config\n                  // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n                  // For example combining a slide and a modal transition would look wrong otherwise\n                  // With this approach, combining different transition styles in the same navigator mostly looks right\n                  // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n                  // but majority of the transitions look alright\n                  if (index !== self.length - 1) {\n                    const nextScene = scenes[index + 1];\n\n                    if (nextScene) {\n                      const {\n                        animationEnabled,\n                        gestureDirection = defaultTransitionPreset.gestureDirection,\n                        transitionSpec = defaultTransitionPreset.transitionSpec,\n                        cardStyleInterpolator = animationEnabled === false\n                          ? forNoAnimationCard\n                          : defaultTransitionPreset.cardStyleInterpolator,\n                        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                      } = nextScene.descriptor\n                        ? nextScene.descriptor.options\n                        : ({} as StackNavigationOptions);\n\n                      transitionConfig = {\n                        gestureDirection,\n                        transitionSpec,\n                        cardStyleInterpolator,\n                        headerStyleInterpolator,\n                      };\n                    }\n                  }\n\n                  const {\n                    top: safeAreaInsetTop = insets.top,\n                    right: safeAreaInsetRight = insets.right,\n                    bottom: safeAreaInsetBottom = insets.bottom,\n                    left: safeAreaInsetLeft = insets.left,\n                  } = safeAreaInsets || {};\n\n                  const headerHeight =\n                    headerMode !== 'none' && headerShown !== false\n                      ? headerHeights[route.key]\n                      : 0;\n\n                  return (\n                    <MaybeScreen\n                      key={route.key}\n                      style={StyleSheet.absoluteFill}\n                      enabled={isScreensEnabled}\n                      active={isScreenActive}\n                      pointerEvents=\"box-none\"\n                    >\n                      <CardContainer\n                        index={index}\n                        active={index === self.length - 1}\n                        focused={focused}\n                        closing={closingRouteKeys.includes(route.key)}\n                        layout={layout}\n                        gesture={gesture}\n                        scene={scene}\n                        safeAreaInsetTop={safeAreaInsetTop}\n                        safeAreaInsetRight={safeAreaInsetRight}\n                        safeAreaInsetBottom={safeAreaInsetBottom}\n                        safeAreaInsetLeft={safeAreaInsetLeft}\n                        cardOverlay={cardOverlay}\n                        cardOverlayEnabled={cardOverlayEnabled}\n                        cardShadowEnabled={cardShadowEnabled}\n                        cardStyle={cardStyle}\n                        onPageChangeStart={onPageChangeStart}\n                        onPageChangeConfirm={onPageChangeConfirm}\n                        onPageChangeCancel={onPageChangeCancel}\n                        onGestureStart={onGestureStart}\n                        onGestureCancel={onGestureCancel}\n                        onGestureEnd={onGestureEnd}\n                        gestureResponseDistance={gestureResponseDistance}\n                        headerHeight={headerHeight}\n                        onHeaderHeightChange={this.handleHeaderLayout}\n                        getPreviousScene={this.getPreviousScene}\n                        getFocusedRoute={this.getFocusedRoute}\n                        mode={mode}\n                        headerMode={headerMode}\n                        headerShown={headerShown}\n                        hasAbsoluteHeader={\n                          isFloatHeaderAbsolute && !headerTransparent\n                        }\n                        renderHeader={renderHeader}\n                        renderScene={renderScene}\n                        onOpenRoute={onOpenRoute}\n                        onCloseRoute={onCloseRoute}\n                        onTransitionStart={onTransitionStart}\n                        onTransitionEnd={onTransitionEnd}\n                        gestureEnabled={\n                          index !== 0 && getGesturesEnabled({ route })\n                        }\n                        gestureVelocityImpact={gestureVelocityImpact}\n                        {...transitionConfig}\n                      />\n                    </MaybeScreen>\n                  );\n                })}\n              </MaybeScreenContainer>\n              {isFloatHeaderAbsolute ? floatingHeader : null}\n            </React.Fragment>\n          );\n        }}\n      </HeaderShownContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}