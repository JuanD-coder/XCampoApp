{"ast":null,"code":"import * as React from 'react';\nimport CurrentRenderContext from './CurrentRenderContext';\nexport default function useCurrentRender({\n  state,\n  navigation,\n  descriptors\n}) {\n  const current = React.useContext(CurrentRenderContext);\n  if (current && navigation.isFocused()) {\n    current.options = descriptors[state.routes[state.index].key].options;\n  }\n}","map":{"version":3,"names":["React","CurrentRenderContext","useCurrentRender","state","navigation","descriptors","current","useContext","isFocused","options","routes","index","key"],"sources":["/home/cristian/reac_projects/XCampoApp/node_modules/@react-navigation/core/lib/module/useCurrentRender.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport CurrentRenderContext from './CurrentRenderContext';\nimport type { Descriptor, NavigationHelpers } from './types';\n\ntype Options = {\n  state: NavigationState;\n  navigation: NavigationHelpers<ParamListBase>;\n  descriptors: {\n    [key: string]: Descriptor<ParamListBase, string, NavigationState, object>;\n  };\n};\n\n/**\n * Write the current options, so that server renderer can get current values\n * Mutating values like this is not safe in async mode, but it doesn't apply to SSR\n */\nexport default function useCurrentRender({\n  state,\n  navigation,\n  descriptors,\n}: Options) {\n  const current = React.useContext(CurrentRenderContext);\n\n  if (current && navigation.isFocused()) {\n    current.options = descriptors[state.routes[state.index].key].options;\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,oBAAP,MAAiC,wBAAjC;AAeA,eAAe,SAASC,gBAATA,CAA0B;EACvCC,KADuC;EAEvCC,UAFuC;EAGvCC;AAHuC,CAA1B,EAIH;EACV,MAAMC,OAAO,GAAGN,KAAK,CAACO,UAAN,CAAiBN,oBAAjB,CAAhB;EAEA,IAAIK,OAAO,IAAIF,UAAU,CAACI,SAAX,EAAf,EAAuC;IACrCF,OAAO,CAACG,OAAR,GAAkBJ,WAAW,CAACF,KAAK,CAACO,MAAN,CAAaP,KAAK,CAACQ,KAAnB,EAA0BC,GAA3B,CAAX,CAA2CH,OAA7D;EACD;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}